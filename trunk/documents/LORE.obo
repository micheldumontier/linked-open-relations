format-version: 1.4
date: 10:05:2013 14:22
saved-by: Ward BlondÃ©

[Typedef]
id: creates 
name: creates 
def: "For entities S and O, it holds that 'S creates O', if and only if 1) an action of S directly or indirectly leads to the existence of O." [LORE:md]
comment: Examples: an artist paints a painting, a ribosome synthesizes a protein, a diver creates a wave.

[Typedef]
id: denotes
name: denotes
def: "The relation 'denotes' is used for connecting a symbol-like information entity with some other entity. Denotation is stricter than aboutness, as it does not expand to entities related to the target entities." [LORE:ss]
comment: Example: the string of characters 'Barack Obama', denotes the person Barack Obama. The string 'The president of the U.S.' denotes him in 2012, but not in 2007.

[Typedef]
id: destroys
name: destroys
def: "For entities S and O, it holds that 'S destroys O', if and only if 1) an action of S directly or indirectly leads to the non-existence of O." [LORE:md]
comment: Examples: An enzyme cleaves its substrate, a secretary shreds a sensitive document.

[Typedef]
id: equals
name: equals
def: "The binary relation equals holds iff two compared particulars are 'equal'. This equality can either be quantitative which is a numerical equality or qualitative which is the categorial equality of the two particulars." [LORE:mb]
comment: Examples: equals(speed_car1, speed_car2), equals(animal_1, animal_2) => (example which might be well defined in a given local context but must be disambiguated for global use). Axioms: specificly, relates the values of a certain quality of two particulars, hence, relates a specific quality of two particulars, hence, relates two particulars, hence, the domain and range are: (value region, quality, particular)/(value region, quality, particular) Algebraic properties: transitive, reflexive, symmetric. Issues: The meaning of the comparative results for all of these binary generic comparative relations for particulars can be exactly specified for most scale types (see details below) and is only an issue for certain categorial qualities (e.g. color). The main issue of all af these generic comparative relations is disambiguation of what exactly is related to each otherm where not specified. Hence, the problem is how to define the exact application and give rules for that: e.g. the quality which is compared when particulars are compared local vs. global (semantic web) use. In a defined local scenario the context may clearly disambigute the related.
is_reflexive: true
is_transitive: true

[Typedef]
id: has_associate
name: has associate
def: "The relation 'has associate' is used as a superrelation for associative relations. These characterize independent entities through associates, which are other independent entities. The independence of associates are opposed to qualities, which are dependent entities and only exist for the sake of characterizing independent entities. Hence, lengths, colors and temperatures are qualities, related to via 'has quality', whereas objects and processes are entities that can be associates and that can have associates." [LORE:wb]
comment: Example: USA has associate Barack Obama (USA has president Barack Obama), John has associate room A.123 (John has office room A.123), Pete has associate Max (Pete has pet Max), Company123 has associate Ken (Company123 has employee Ken). Inverse: 'has associate' (symmetric) Algebraic properties: symmetric, not transitive, not antitransitive. Issues: This relation is very generic and serves to create enough recall for querying on the multitude of associative relations. The relation is rather epistemological (dependent on human choices in describing knowledge) than ontological (objectively verifiable), since it holds after the creation of any associative relation between two entities. Even with restrictions on the set of associative relations, through guidelines or an extended logical definition that uses unions and disjointness of relations, it will remain hard to determine objectively whether two objects are associated to each other or not. We could however argue that any particular associative relation should be ontological, and that there exists a logical definition of 'has associate', as a union of such ontological associative relations, that is such that the majority of pairs of entities are not associated. This would render 'has associate' as an ontological relation with practical use. In the absence of this definition, it remains epistemological.
is_symmetric: true

[Typedef]
id: has_beginning
name: has beginning
def: "When projecting on a 1-dimensional space, x hasBeginning y iff ForAll? x, y, z; TemporalInterval?(x) AND TemporalInstant?(y) AND TemporalInstant?(z) AND isTemporalPartOf (y,x) AND isTemporalPartOf(z,x) AND y != z AND precedes(y, z)." [LORE:aa]
comment: Example: day D has beginning morning M, marathon A has beginning 10 am.

[Typedef]
id: has_quality
name: has quality
def: "Has quality is a relation between an entity and his quality." [LORE:wb]
comment: Example: the apple has quality redness.

[Typedef]
id: is_about
name: is about
def: "The relation 'is about' is the most general link between an information entity and some other entity." [LORE:ss]
comment: Example: Picasso's painting 'Guernica' is about war, but more specifically about a war-related events such as the terror against civilians. It is also about a town, and it is about the inhabitants of that town. My chest X-ray is about my chest, but also about my ribs and my heart, as well as about some disorder, e.g. a broken clavicle. Inverse: is represented by.

[Typedef]
id: is_adjacent_to
name: is adjacent to
def: "For entities S and O, it holds that 'S is adjacent to O', if and only if 1) S and O are within the same space or time-space, and 2) S and O are adjacent." [LORE:wb]
comment: Example: the building is adjacent to the street, the morning is adjacent to the noon.

[Typedef]
id: is_alike
name: is alike
def: "The binary relation 'is alike' holds iff two compared particulars are 'similar' but not 'equal' (or 'too different'). The given definition might differ from common sense (or intuitive) usage of 'similarity' which often includes 'equality'. The qualitative or quantitative similarity is usually defined as unequality but 'near to equality' with a given deviation (tolerance intervall, qualitative tolerance)." [LORE:ss]
comment: Examples: alike(speed_car1, speed_car2), alike(animal_1, animal_2) => (example which might be well defined in a given local context but must be disambiguated for global use). Axioms: tolerance intervall/ qualitative tolerance specified. Algebraic properties: intransitive, irreflexive (without equality), symmetric. Issues: Besides the general considerations above (equals) a further issue is, how and where to define the assumed tolerance interval which has been applied to derive the result of the comparison.
is_symmetric: true

[Typedef]
id: is_before 
name: is before 
def: "For entities S and O, it holds that 'S is before O', if and only if 1) S and O are entities within the same 1-dimensional ordered space, including the time-axis and 2) S is ordered before O (where order goes from early to late, close to far, low to high, small to large and few to many)." [LORE:wb]
comment: Examples: World War I is before World War II, the runner that arrived first is before the runner that arrived second, 3 is before 5, on the trip from Paris to London, Calais is before Dover Problems: The definition of the defined order may depend on a specific context, like in the trip from Paris to London. Algebraic properties: transitive, inverse relation: is after.
is_transitive: true

[Typedef]
id: is_contained_in
name: is contained in
def: "For entities S and O, it holds that 'S is contained in O', if and only if 1) S and O are within the same spatially dimensioned area, 2) O has an associated container volume defined by the outside borders of O (like a convex envelope, or a convex envelope minus the volume of O) and 3) space occupied by S is part of the space occupied by the associated container volume of O." [LORE:wb]
comment: Examples: some water is contained in a glass, La Palma is contained in the Atlantic Ocean. A wheel that is part of a car, and therefore located in that car, is not contained in the car. Problems: the application of 'is contained in' depends on the definition of the associated container volume of O. This definition may often be very similar as the definition of the outside borders for 'is located in'. Algebraic properties: reflexive, transitive Inverse relation: 'contains'.
is_reflexive: true
is_transitive: true

[Typedef]
id: is_located_in
name: is located in 
def: "For particular entities S and O, it holds that 'S is located in O', if and only if 1) S and O are within the same spatially dimensioned area, 2) O has a (not necessarily convex) outside border or envelope and 3) the space occupied by S is part of the space occupied by the outside borders of O." [LORE:wb]
comment: Examples: Pete is located in his car, Iceland is located in Europe. Problems: the application of 'is located in' depends on the definition of the outside borders of O. If the beaches of La Palma define the outside borders of the Atlantic Ocean, then La Palma is not located in the Atlantic Ocean, otherwise it is. Somewhat counterintuitively, a wheel is located in a car and a chimney is located in a house. Algebraic properties: reflexive, transitive, inverse relation 'is location of', Rule: if S is part of O and O is a spatial entity, then S is located in O. Alternative names: is in, has location, has as location, is located by.
is_reflexive: true
is_transitive: true

[Typedef]
id: interacts_with 
name: interacts with 
def: "For entities S and O, it holds that 'S interacts with O', if and only if 1) S and O are in spatial proximity over some duration of time, and 2) they act in such a way that they have an effect on each other." [LORE:md]
comment: Examples: A boy interacts with his father, a small molecule interacts with an enzyme. Algebraic properties: symmetric.
is_symmetric: true

[Typedef]
id: is_part_of
name: is part of
def: "For individual entities S and O, it holds that 'S is part of O', if and only if 1) S and O are within the same mereologically dimensioned area (like space, time, space-time, or any ordered space including abstract space like in information entities), 2) S is a part of O." [LORE:wb]
comment: Examples: Crete is part of Europe, this morning is part of today, my skin is part of my body, this third chapter is part of this book. Problems: #'is part of' has a broader application compared to other mereological relation types like 'is located in', since it is also used for time. It is still left open whether we will distinguish this temporal meaning of 'is part of' by a different name. #'is part of' in ordinary speech is often understood to exclude reflexivity. Rule: if S has part O and O is a spatial entity, then S is location of O Alternative names: is part of, part of. inverse_of: has_part.
is_reflexive: true
is_transitive: true

[Typedef]
id: modifies
name: modifies
def: "For entities S and O, it holds that 'S modifies O', if and only if 1) S and O are in direct or indirect physical contact, and 2) one or more qualities or attribute values of O changes as a result of its interaction with S." [LORE:md]
comment: Examples: An enzymes phosphorylates its target, a desiccator dries a sample.

[Typedef]
id: overlaps_with
name: overlaps with
def: "When projecting on a 1-dimensional space, x overlaps with y iff there is at least 1 z that is part of both x and y." [LORE:aa]

[Typedef]
id: participates_in
name: participates in
def: "For individual entities S and O, it holds that 'S participates in O', if and only if 1) S is an object and 2) O is a process and 3) the object S participates in the process O." [LORE:wb]
comment: Examples: protein A participates in apoptosis process B, author C participates in paper writing process D






















