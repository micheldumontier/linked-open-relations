#summary compare particulars with regard to their quality values

= Introduction =

Comparative relations compare two particulars with regard to qualities and their respective quality values. They can either represent the equality of individuals with regard to these values or their difference and further specify this inequality.

A generic comparative relation is _comp_(a, b, qa, qb, m, n, i=0) with a, b particulars with their associated qualities qa, qb and their values m of qa and n of qb, i is the upper limit of a "similarity-tolerance interval" (if not given it is 0). Even the qualities need not to be of the exactly same type (e.g. _wider than high_(table_1, door_1))

The main problem is to express *what* exactly is compared, decompose ("map") the n-ary relational parts to associated components in a structured and reproducible way(_has qualifier_, _has value_, _related to_) and specify meaningful names.

= Comparative Information relations =

*Name:* equals

*Definition:* for now, see details

*Examples:* 

*Issues:* for discrete qualitative values the equality criterion must be known

*Algebraic properties:* transitive, reflexive, symmetric

*Rule:*

----

*Name:* unequals/ different from

*Definition:* 

*Examples:* 

*Issues:* 

*Algebraic properties:* intransitive, ireflexive, symmetric 

*Rule:*

----


*Name:* alike/ similar to

*Superrelation:* unequals

*Definition:* 

*Examples:* 

*Issues:* 

*Algebraic properties:* intransitive, reflexive, symmetric

*Rule:*

----

*Name:* larger than/ smaller than
*Superrelation:* unequals

*Definition:* 

*Synonyms:* dependent on the quality, e.g. before/ after (timepoints), shorter/ longer (durations), etc... (can be Subrelations dependent on domain [if we can define domains])

*Examples:* 

*Issues:* 

*Algebraic properties:* transitive, irreflexive, asymmetric

*Rule:*

= Components =

  * in relation to -> indicates the reference object / part / quality
  * has qualifier -> increased, decreased, etc.

= Details =

A prototypic n-ary comparative relation could be modelled as a re-ified comparison entity with two (ordered) "ingoing" values, one optional upper bound of an tolerance interval, one qualitative quality and an optional quantitative quality (for the exact meaning of the parameters and qualities see below). To _directly_ "associate" the ingoing values and of the compared entities is a shortcut for convinience (Can we directly use "values" in an information object?). See the proposal for a ternery process model of comparison for a probably more correct ontological representation from Ward below (then change the direction of the two left branches with compared entities and apply "participation", but gain deeper indirection).

<img src="http://www.greeninghealthcare.org/DAV/datadir/obeo/comparison.png"/ width="80%">

Now de-ify comparison, and arrive at a set of sound binary comparative relations :-) . First proposal for reduction:

==== functional "definitions" ====

 * numerical comparison: _compn_(m, n)
   m, n are numbers on nomial, ordinal, interval, ratio scales. _compn_ is one of: _equalsn, unequalsn_ for all scale types of m, n with m=n for _equalsn_ and m!=n for _unequalsn_. _unequalsn_ is on of _larger thann/ smaller thann_ for m, n on ordinal, inverall and ratio scales with m>n for _larger thann_ and m<n for _smaller thann_. _difference ofn_ is defined as quantification of inequality for intervall and ratio scales as |m-n| (and as _rank difference ofn_ for ordinal scales), _ratio ofn_ is only defined for ratio scales as m/n.

 * numerical comparison: _compn_(m, n, i)
   _aliken_ is defined as _smaller thann_(_differencen_(n, m), i) with n, m on ordinal, intervall and ration scales and i an intervall width > 0 on ordinal, intervall and ratio scales. With i=0 (not given) _comp_(m, n)
 

 * generic comparison: _comp_(a, b, qa, qb, m, n, i)
   For particulars a, b of generic type with qualities qa, qb having values (or regions) m of qa and n of qb, the following _comp_ relations can be defined: _comp_(a, b, qa, qb, m, n, i) -> _compn_(m, n, i) for all comparisons on numeric values m, n, i (names of the relations of _compn_ without postfix "n"). For comparisons on qualities with discrete qualitative values either a transformation on ordinal numerical scale is sufficient *or* the two relations _equals_ and _alike_ must be defined in terms of the specific qualities and their respective values.
 
 * generic comparison with triangulation: _comp_(a, b, qa, qb, m, n, c, qc, p, i)
   [Don't know if we should follow this] For particulars, qualities and values (regions) as above the generic reference particular c with quality qc and its value p, the following _comp_ relations can be defined: 
 _onesided_ (_larger thann_(m, p) AND _larger thann_(n, p) OR _smaller thann_(m, p) AND _smaller thann_(n, p)), _twosided_(NOT _onesided_), _residual diff_(_differencen_(_differencen_(m,p), _differencen_(n, p)), residual ratio_ (_ration_(_differencen_(m,p), _differencen_(n, p))

=== (non exhaustive) list of what should be covered by comparational relations ==

 * similarity/ equality vs. dissimilarity/ inequality
 * (quality of distinction (color, tone))
 * direction of difference (ordering)
 * (absolute) size of difference (magnitude, scale)
 * algebraic properties of differences (ratio is meaningful, scale, inversity, symmetry, reflexivity?, transitivity?)
 * intended precision of similarity (explicit vagueness)
 * relational system specified (normative element(s) stated)
 * etc.


= Questions =

  * Possibly, some of the information relations are (ternary) comparative: has_rank  is comparative. One can have only have a rank in comparison to other individuals (so this is the assignment of a number depending on the comparison)???

= Examples =

  * 'is similar to'
  * 'is different from'
  * 'has high plasma membrane amount' / 'has low plasma membrane part'
  * 'has high plasma membrane part' / 'has low plasma membrane amount' 

= Ternary relation model =

An RDF-expressible ternary model is proposed:
Consider two comparanda C1 and C2, which are particulars that are compared. Consider a particular quality Q1.

E.g. C1 and C2 are stars. Q1 is brightness magnitude.
  * C1 is decreased in magnitude relative to C2

<=>

  * 'is decreased in magnitude relative to' rdfs:subPropertyOf 'is before'
  * C1 'is before' C2
  * C1 'participates in' _comparison654231
  * 'is before' 'participates in' _comparison654231
  * C2 'participates in' _comparison654231
  * _comparison654231 'is bearer of' magnitude_quality_Q1







 